AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: AWS SAM template for the Pager application.

Resources:
  ##########################################################
  # SERVICES
  ##########################################################
  UserService:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/user/template.yaml
  AuthService:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/auth/template.yaml
      Parameters:
        UserTableName: !GetAtt UserService.Outputs.TableName
  AgencyService:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./services/agency/template.yaml
      Parameters:
        PolicyStoreId: Nhunw9Q4KevxMv9ZbqWK1k

  ##########################################################
  # API
  ##########################################################
  RootApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: "pager-federated-api"
      Description: "Pager Federated API"
      ProtocolType: "HTTP"
  ApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref RootApi
      AuthorizerType: REQUEST
      IdentitySource:
        - "$request.header.Authorization"
      Name: pager-api-authorizer
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthService.Outputs.AuthorizerLambdaArn}/invocations"
      AuthorizerPayloadFormatVersion: "2.0"
  ApiGatewayAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthService.Outputs.AuthorizerLambdaArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RootApi}/authorizers/${ApiAuthorizer}
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref RootApi
      StageName: prod
      AutoDeploy: true

  ##########################################################
  # ROUTES
  ##########################################################
  UserServiceRootRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RootApi
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: "ANY /user"
      Target: !Join
        - /
        - - integrations
          - !Ref UserServiceRootIntegration
  UserServiceWildCardRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RootApi
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: "ANY /user/{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref UserServiceWildCardIntegration
  AgencyServiceRootRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RootApi
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: "ANY /agency"
      Target: !Join
        - /
        - - integrations
          - !Ref AgencyServiceRootIntegration
  AgencyServiceWildCardRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RootApi
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizer
      RouteKey: "ANY /agency/{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref AgencyServiceWildCardIntegration

  ##########################################################
  # ROUTE INTEGRATIONS
  ##########################################################
  UserServiceRootIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RootApi
      Description: "User API root proxy integration"
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub "https://${UserService.Outputs.ApiId}.execute-api.${AWS::Region}.amazonaws.com/prod"
      PayloadFormatVersion: "1.0"
      RequestParameters:
        "append:header.x-pager-userid": "$context.authorizer.userid"
        "append:header.x-pager-userinfo": "$context.authorizer.userinfo"
  UserServiceWildCardIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RootApi
      Description: "User API wild card proxy integration"
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub "https://${UserService.Outputs.ApiId}.execute-api.${AWS::Region}.amazonaws.com/"
      PayloadFormatVersion: "1.0"
      RequestParameters:
        "overwrite:path": "prod/${request.path.proxy}"
        "append:header.x-pager-userid": "$context.authorizer.userid"
        "append:header.x-pager-userinfo": "$context.authorizer.userinfo"
  AgencyServiceRootIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RootApi
      Description: "Agency API root proxy integration"
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub "https://${AgencyService.Outputs.ApiId}.execute-api.${AWS::Region}.amazonaws.com/prod"
      PayloadFormatVersion: "1.0"
      RequestParameters:
        "append:header.x-pager-userid": "$context.authorizer.userid"
        "append:header.x-pager-userinfo": "$context.authorizer.userinfo"
  AgencyServiceWildCardIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RootApi
      Description: "Agency API wild card proxy integration"
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub "https://${AgencyService.Outputs.ApiId}.execute-api.${AWS::Region}.amazonaws.com/"
      PayloadFormatVersion: "1.0"
      RequestParameters:
        "overwrite:path": "prod/${request.path.proxy}"
        "append:header.x-pager-userid": "$context.authorizer.userid"
        "append:header.x-pager-userinfo": "$context.authorizer.userinfo"

  ##########################################################
  # COGNITO
  # Disabled for the time being in favor of Auth0
  ##########################################################
  # UserPool:
  #   Type: AWS::Cognito::UserPool
  #   Properties:
  #     UserPoolName: pager-api-user-pool
  #     AutoVerifiedAttributes:
  #       - email
  #     Schema:
  #       - Name: name
  #         AttributeDataType: String
  #         Mutable: true
  #         Required: true
  #       - Name: email
  #         AttributeDataType: String
  #         Mutable: false
  #         Required: true
  # AuthAppClient:
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     AllowedOAuthFlows:
  #       - implicit
  #     AllowedOAuthScopes:
  #       - aws.cognito.signin.user.admin
  #       - email
  #       - openid
  #       - profile
  #     AllowedOAuthFlowsUserPoolClient: true
  #     ClientName: pager-api-app-client
  #     CallbackURLs:
  #       - "https://your-app-url/callback" # Set your callback URL here.
  #     LogoutURLs:
  #       - "https://your-app-url/logout" # Set your logout URL here.
  #     ExplicitAuthFlows:
  #       - ALLOW_USER_PASSWORD_AUTH
  #       - ALLOW_REFRESH_TOKEN_AUTH
  #     UserPoolId: !Ref UserPool
  #     SupportedIdentityProviders:
  #       - COGNITO
  # AuthHostedUI:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties:
  #     Domain: !Join
  #       - "-"
  #       - - !Ref RootApi
  #         - !Ref AuthAppClient
  #     UserPoolId: !Ref UserPool
Outputs:
  RootApiUrl:
    Description: "Root API Gateway URL"
    Value: !Sub "https://${RootApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
