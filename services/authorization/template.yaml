AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: AWS SAM template for the Pager Authorization service.

Resources:
  ###############################################
  # POLICY STORE
  ###############################################
  AVPStore:
    Type: AWS::VerifiedPermissions::PolicyStore
    Properties:
      ValidationSettings:
        Mode: STRICT
      Schema:
        CedarJson: |
          {
            "pager": {
              "entityTypes": {
                "Device": {
                  "memberOfTypes": ["Agency", "User"],
                  "shape": {
                    "type": "Record",
                    "attributes": {}
                  }
                },
                "User": {
                  "memberOfTypes": ["Agency"],
                  "shape": {
                    "type": "Record",
                    "attributes": {
                      "agencies": {
                        "required": false,
                        "element": {
                          "name": "Agency",
                          "type": "Entity"
                        },
                        "type": "Set"
                      },
                      "entitlements": {
                        "required": false,
                        "element": {
                          "type": "String"
                        },
                        "type": "Set"
                      },
                      "currentAgency": {
                        "type": "Entity",
                        "required": false,
                        "name": "Agency"
                      }
                    }
                  }
                },
                "Platform": {
                  "memberOfTypes": [],
                  "shape": {
                    "type": "Record",
                    "attributes": {}
                  }
                },
                "Agency": {
                  "memberOfTypes": ["Membership"],
                  "shape": {
                    "type": "Record",
                    "attributes": {
                      "membership": {
                        "type": "Entity",
                        "required": true,
                        "name": "Membership"
                      }
                    }
                  }
                },
                "Membership": {
                  "memberOfTypes": [],
                  "shape": {
                    "type": "Record",
                    "attributes": {}
                  }
                }
              },
              "actions": {
                "Update": {
                  "appliesTo": {
                    "context": {
                      "attributes": {},
                      "type": "Record"
                    },
                    "principalTypes": ["User"],
                    "resourceTypes": ["Agency"]
                  },
                  "memberOf": []
                },
                "ReadAgency": {
                  "appliesTo": {
                    "principalTypes": ["User"],
                    "resourceTypes": ["Agency"],
                    "context": {
                      "type": "Record",
                      "attributes": {}
                    }
                  },
                  "memberOf": []
                },
                "Deactivate": {
                  "memberOf": [],
                  "appliesTo": {
                    "principalTypes": ["User"],
                    "context": {
                      "type": "Record",
                      "attributes": {}
                    },
                    "resourceTypes": ["Agency"]
                  }
                },
                "CreateAgency": {
                  "appliesTo": {
                    "context": {
                      "attributes": {},
                      "type": "Record"
                    },
                    "principalTypes": ["User"],
                    "resourceTypes": ["Platform"]
                  }
                },
                "Activate": {
                  "memberOf": [],
                  "appliesTo": {
                    "resourceTypes": ["Agency"],
                    "principalTypes": ["User"],
                    "context": {
                      "type": "Record",
                      "attributes": {}
                    }
                  }
                }
              }
            }
          }

  ###############################################
  # POLICIES - PLATFORM ADMIN CREATE AGENCY
  ###############################################
  PlatformAdminCreateAgencyPolicy:
    Type: AWS::VerifiedPermissions::Policy
    Properties:
      PolicyStoreId: !Ref AVPStore
      Definition:
        Static:
          Description: "Allow PLATFORM_ADMIN to create agencies."
          Statement: >
            permit(
              principal,
              action in [pager::Action::"CreateAgency"],
              resource == pager::Platform::"platform"
            ) when {
              principal has entitlements && principal.entitlements.contains("PLATFORM_ADMIN")
            };
  ###############################################
  # POLICIES - PLATFORM ADMIN READ AGENCY
  ###############################################
  PlatformAdminReadAgencyPolicy:
    Type: AWS::VerifiedPermissions::Policy
    Properties:
      PolicyStoreId: !Ref AVPStore
      Definition:
        Static:
          Description: "Allow PLATFORM_ADMIN to read agencies."
          Statement: >
            permit(
              principal,
              action in [pager::Action::"ReadAgency"],
              resource
            ) when {
              principal has entitlements && principal.entitlements.contains("PLATFORM_ADMIN")
            };
  ###############################################
  # POLICIES - AGENCY ADMIN
  ###############################################
  AgencyAdminPolicy:
    Type: AWS::VerifiedPermissions::Policy
    Properties:
      PolicyStoreId: !Ref AVPStore
      Definition:
        Static:
          Description: "Agency Admin Permissions"
          Statement: >
            permit (
                principal,
                action in
                    [pager::Action::"ReadAgency",
                    pager::Action::"Activate",
                    pager::Action::"Deactivate",
                    pager::Action::"Update"],
                resource
            )
            when
            {
                principal has agencies &&
                resource in principal.agencies &&
                principal has currentAgency &&
                principal.currentAgency.membership == pager::Membership::"WRITER"
            };
###############################################
# OUTPUTS
###############################################
Outputs:
  PolicyStoreId:
    Description: "The ID of the Amazon Verified Permissions store"
    Value: !Ref AVPStore

Metadata:
  AWS::Include:
    SchemaContent: schema.json
