AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Pager User Service

Parameters:
  Environment:
    Type: String
  LogLevel:
    Type: String
    Default: ERROR
    AllowedValues:
      - DEBUG
      - INFO
      - WARN
      - ERROR
    Description: Log level (DEBUG, INFO, WARN, ERROR)
  EventsTopicArn:
    Type: String
  EventsTopicName:
    Type: String

Resources:
  EventProcessorFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "pager-user-event-processor-${Environment}"
      Handler: bootstrap
      Runtime: provided.al2023
      CodeUri: ./cmd/event-processor
      Timeout: 10
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref EventsTopicName
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          ENVIRONMENT: !Ref Environment
          USER_TABLE_NAME: !Ref UserTable
          EVENTS_TOPIC_ARN: !Ref EventsTopicArn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UserEventsQueue.Arn
            BatchSize: 10
            Enabled: true

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "pager-user-users-${Environment}"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  UserEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "pager-user-events-${Environment}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UserEventsDeadLetterQueue.Arn
        maxReceiveCount: 5

  UserEventsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "pager-user-events-dlq-${Environment}"

  UserEventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UserEventsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt UserEventsQueue.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref EventsTopicArn

  UserEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref EventsTopicArn
      Protocol: sqs
      Endpoint: !GetAtt UserEventsQueue.Arn
      FilterPolicy:
        type:
          # Events
          - "agency.membership.created"
          - "agency.membership.updated"
          - "agency.membership.deleted"
          # Commands
          - "user.user.invite"

Outputs:
  UserTableName:
    Description: User Table Name
    Value: !Ref UserTable
