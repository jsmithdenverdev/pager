AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Pager Gateway Service

Parameters:
  Environment:
    Type: String
    Description: Deployment environment (dev or prod)
  AuthorizerFunctionArn:
    Type: String
  AgencyServiceApiId:
    Type: String
  PageServiceApiId:
    Type: String

Resources:
  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "pager-gateway-${Environment}"
      Auth:
        Authorizers:
          ApiGatewayAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            FunctionArn: !Ref AuthorizerFunctionArn
      StageName: !Ref Environment

  ###########################################################################
  # ROUTES
  ###########################################################################

  AgencyRootRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: ANY /agencies
      Target: !Sub integrations/${AgencyRootRouteIntegration}

  AgencyProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: ANY /agencies/{proxy+}
      Target: !Sub integrations/${AgencyProxyRouteIntegration}

  AgencyPageRootRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: ANY /agencies/{agencyid}/pages
      Target: !Sub integrations/${AgencyPageRootRouteIntegration}

  # AgencyPageProxyRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref ApiGateway
  #     RouteKey: ANY /agencies/{agencyid}/pages/{proxy+}
  #     Target: !Sub integrations/${AgencyPageProxyRouteIntegration}

  PageRootRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: ANY /pages
      Target: !Sub integrations/${PageRootRouteIntegration}

  PageProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: ANY /pages/{proxy+}
      Target: !Sub integrations/${PageProxyRouteIntegration}

  ###########################################################################
  # INTEGRATIONS
  ###########################################################################

  AgencyRootRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub https://${AgencyServiceApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
      PayloadFormatVersion: "1.0"
      RequestParameters:
        append:header.x-pager-userid: $context.authorizer.userid
        append:header.x-pager-userinfo: $context.authorizer.userinfo

  AgencyProxyRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub https://${AgencyServiceApiId}.execute-api.${AWS::Region}.amazonaws.com
      PayloadFormatVersion: "1.0"
      RequestParameters:
        overwrite:path: !Sub ${Environment}/${!request.path.proxy}
        append:header.x-pager-userid: $context.authorizer.userid
        append:header.x-pager-userinfo: $context.authorizer.userinfo

  AgencyPageRootRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub https://${PageServiceApiId}.execute-api.${AWS::Region}.amazonaws.com
      PayloadFormatVersion: "1.0"
      RequestParameters:
        # TODO: Perhaps we should capture the agencyid as a header instead of
        # a path parameter. That would allow us to do all agency lookups under
        # a single route and switch the PK/SK based on the presence of an
        # accountid header.
        overwrite:path: !Sub ${Environment}/agencies/${!request.path.agencyid}
        append:header.x-pager-userid: $context.authorizer.userid
        append:header.x-pager-userinfo: $context.authorizer.userinfo

  # AgencyPageProxyRouteIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref ApiGateway
  #     IntegrationType: HTTP_PROXY
  #     IntegrationMethod: ANY
  #     IntegrationUri: !Sub https://${PageServiceApiId}.execute-api.${AWS::Region}.amazonaws.com
  #     PayloadFormatVersion: "1.0"
  #     RequestParameters:
  #       # TODO: Perhaps we should capture the agencyid as a header instead of
  #       # a path parameter. That would allow us to do all agency lookups under
  #       # a single route and switch the PK/SK based on the presence of an
  #       # accountid header.
  #       overwrite:path: !Sub ${Environment}/agencies/${!request.path.agencyid}/${!request.path.proxy}
  #       append:header.x-pager-userid: $context.authorizer.userid
  #       append:header.x-pager-userinfo: $context.authorizer.userinfo

  PageRootRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub https://${PageServiceApiId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
      PayloadFormatVersion: "1.0"
      RequestParameters:
        append:header.x-pager-userid: $context.authorizer.userid
        append:header.x-pager-userinfo: $context.authorizer.userinfo

  PageProxyRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub https://${PageServiceApiId}.execute-api.${AWS::Region}.amazonaws.com
      PayloadFormatVersion: "1.0"
      RequestParameters:
        overwrite:path: !Sub ${Environment}/${!request.path.proxy}
        append:header.x-pager-userid: $context.authorizer.userid
        append:header.x-pager-userinfo: $context.authorizer.userinfo

Outputs:
  ApiGatewayUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"

  ApiGatewayId:
    Value: !Ref ApiGateway
    Export:
      Name: ApiGatewayId
