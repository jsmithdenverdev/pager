name: Services Pipeline

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "services/**"
  push:
    branches:
      - main
    paths:
      - "services/**"

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      service_changes: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v45.0.3
        with:
          matrix: "true"
          dir_names: "true"
          dir_names_max_depth: "1"
          path: ./services
          files_ignore: |
            authorization/**

  lint-and-test:
    needs: determine-changes
    if: ${{ needs.determine-changes.outputs.service_changes != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        directory: ${{ fromJson(needs.determine-changes.outputs.service_changes) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      - name: Test package
        run: |
          cd ./services/${{ matrix.directory }}
          go test ./...

  build-dev:
    if: |
      github.event_name == 'pull_request' && 
      (needs.lint-and-test.result == 'success' || needs.lint-and-test.result == 'skipped')
    needs: lint-and-test
    runs-on: ubuntu-latest
    environment: development
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      - name: SAM build
        run: |
          sam build

      - name: SAM validate
        run: |
          sam validate --lint

      - name: Upload SAM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-dev
          path: .aws-sam/build

  build-prod:
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      (needs.lint-and-test.result == 'success' || needs.lint-and-test.result == 'skipped')
    needs: lint-and-test
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      - name: SAM build
        run: |
          sam build

      - name: SAM validate
        run: |
          sam validate --lint

      - name: Upload SAM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-prod
          path: .aws-sam/build

  deploy-dev:
    needs: build-dev
    if: |
      github.event_name == 'pull_request' && 
      needs.build-dev.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download SAM artifact
        uses: actions/download-artifact@v4
        with:
          name: sam-build-dev
          path: .aws-sam/build

      - name: Deploy to dev
        run: |
          sam deploy --region ${{ vars.AWS_REGION }} --no-confirm-changeset --no-fail-on-empty-changeset

  deploy-prod:
    needs: build-prod
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      needs.build-prod.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download SAM artifact
        uses: actions/download-artifact@v4
        with:
          name: sam-build-prod
          path: .aws-sam/build

      - name: Deploy to prod
        run: |
          sam deploy --region ${{ vars.AWS_REGION }} --no-confirm-changeset --no-fail-on-empty-changeset

  # This job ensures branch protection rules work with matrix jobs
  pipeline-status:
    if: always()
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-dev, build-prod, deploy-dev, deploy-prod]
    steps:
      - name: Check pipeline status
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
