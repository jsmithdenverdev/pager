name: Package CI

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "pkg/**"

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.set-changes.outputs.changed_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine changed packages
        id: set-changes
        run: |
          CHANGED_DIRS=$(git diff --name-only origin/main...HEAD | grep '^pkg/' | cut -d'/' -f1-2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Changed directories: $CHANGED_DIRS"
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_OUTPUT

  build-and-test:
    needs: determine-changes
    runs-on: ubuntu-latest
    if: needs.determine-changes.outputs.changed_dirs != '[]'
    strategy:
      matrix:
        directory: ${{ fromJson(needs.determine-changes.outputs.changed_dirs) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      - name: Build package
        run: |
          cd ${{ matrix.directory }}
          go build ./...

      - name: Test package
        run: |
          cd ${{ matrix.directory }}
          go test ./...

      # TODO: This won't be neccesary for packages as we can use a git commit
      # sha as the package version.
      # However, this may be useful for ephemeral service builds. Keeping the
      # code around for the time being.
      # - name: Normalize branch name
      #   id: branch_name
      #   run: |
      #     branch_name="$GITHUB_HEAD_REF"
      #     normalized_branch_name="${branch_name//\//-}"
      #     echo "Normalized branch name: $normalized_branch_name"
      #     echo "normalized_branch_name=$normalized_branch_name" >> $GITHUB_ENV

      # - name: Set short git commit SHA
      #   id: short_sha
      #   run: |
      #     calculated_sha=$(git rev-parse --short ${{ github.sha }})
      #     echo "Calculated short sha: $calculated_sha"
      #     echo "commit_short_sha=$calculated_sha" >> $GITHUB_ENV

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ matrix.directory }}/${{ env.latest_version }}-${{ env.normalized_branch_name }}.${{ env.commit_short_sha }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
