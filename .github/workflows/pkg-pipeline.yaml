name: Pkg Pipeline

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "pkg/**"
  push:
    branches:
      - main
    paths:
      - "pkg/**"

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v45.0.3
        with:
          matrix: "true"
          dir_names: "true"
          dir_names_max_depth: "1"
          path: ./pkg

  test:
    needs: determine-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.determine-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      - name: Test package
        run: |
          cd ./pkg/${{ matrix.directory }}
          go test ./...

  tag-and-release:
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    needs: [determine-changes, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.determine-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version increment
        run: |
          echo "Github Head Ref: $GITHUB_HEAD_REF"
          version_increment=$(./scripts/branch_version.sh $GITHUB_HEAD_REF)
          echo "Version increment: $version_increment"
          echo "version_increment=$version_increment" >> $GITHUB_ENV

      - name: Get latest package semver
        run: |
          latest_version=v1.0.0
          TAG=$(git tag -l "pkg/${{ matrix.directory }}/*" --sort=-v:refname | head -n 1)
          if [ "$TAG" ]; then
            VERSION=$(echo "$TAG" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
            latest_version=$VERSION 
          fi
          echo "Latest version: $latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_ENV

      - name: Calculate next package semver
        run: |
          # Extract the major, minor, and patch components from the version
          major=$(echo "$latest_version" | cut -d '.' -f 1 | tr -d 'v')
          minor=$(echo "$latest_version" | cut -d '.' -f 2)
          patch=$(echo "$latest_version" | cut -d '.' -f 3)

          case "$version_increment" in
            "MAJOR")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "MINOR")
              minor=$((minor + 1))
              patch=0
              ;;
            "PATCH")
              patch=$((patch + 1))
              ;;
            "NOOP")
              # No operation, keep version as is
              ;;
            *)
              echo "Invalid increment type. Use MAJOR, MINOR, PATCH, or NOOP."
              exit 1
              ;;
          esac

          next_version="v$major.$minor.$patch"
          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: pkg/${{ matrix.directory }}/${{ env.next_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This job ensures branch protection rules work with matrix jobs
  pipeline-status:
    if: always()
    runs-on: ubuntu-latest
    needs: [test, tag-and-release]
    steps:
      - name: Check pipeline status
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
